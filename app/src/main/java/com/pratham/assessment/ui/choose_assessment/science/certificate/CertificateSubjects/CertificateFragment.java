package com.pratham.assessment.ui.choose_assessment.science.certificate.CertificateSubjects;import android.app.ProgressDialog;import android.content.Intent;import android.graphics.Bitmap;import android.graphics.pdf.PdfDocument;import android.net.Uri;import android.os.Bundle;import android.os.Environment;import android.os.Handler;import android.support.v4.app.Fragment;import android.support.v4.content.FileProvider;import android.support.v7.widget.CardView;import android.support.v7.widget.LinearLayoutManager;import android.support.v7.widget.RecyclerView;import android.text.Html;import android.util.Log;import android.widget.FrameLayout;import android.widget.RelativeLayout;import android.widget.ScrollView;import android.widget.TextView;import android.widget.Toast;import com.androidnetworking.AndroidNetworking;import com.androidnetworking.error.ANError;import com.androidnetworking.interfaces.StringRequestListener;import com.ezydev.bigscreenshot.BigScreenshot;import com.google.gson.Gson;import com.pratham.assessment.AssessmentApplication;import com.pratham.assessment.R;import com.pratham.assessment.custom.FastSave;import com.pratham.assessment.custom.customFont.SansTextView;import com.pratham.assessment.database.AppDatabase;import com.pratham.assessment.domain.AssessmentPaperForPush;import com.pratham.assessment.domain.AssessmentPaperPattern;import com.pratham.assessment.domain.CertificateRatingModalClass;import com.pratham.assessment.utilities.APIs;import com.pratham.assessment.utilities.Assessment_Constants;import com.pratham.assessment.utilities.Assessment_Utility;import org.androidannotations.annotations.AfterViews;import org.androidannotations.annotations.Bean;import org.androidannotations.annotations.Click;import org.androidannotations.annotations.EFragment;import org.androidannotations.annotations.ViewById;import java.io.File;import java.io.FileOutputStream;import java.io.IOException;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Date;import java.util.List;import butterknife.OnClick;@EFragment(R.layout.fragment_certificate)public class CertificateFragment extends Fragment implements CertificateContract.CertificateView, BigScreenshot.ProcessScreenshot {    @ViewById(R.id.tv_name)    TextView tv_studentName;    @ViewById(R.id.tv_name_details)    TextView tv_name_details;    @ViewById(R.id.tv_correct_cnt)    TextView tv_correct_cnt;    @ViewById(R.id.tv_wrong_cnt)    TextView tv_wrong_cnt;    @ViewById(R.id.tv_skip_cnt)    TextView tv_skip_cnt;    @ViewById(R.id.tv_total_time)    TextView tv_total_time;    @ViewById(R.id.tv_time_taken)    TextView tv_time_taken;    @ViewById(R.id.tv_total_marks)    TextView tv_total_marks;    @ViewById(R.id.tv_student_marks)    TextView tv_student_marks;    @ViewById(R.id.tv_total_cnt)    TextView tv_total_cnt;    /* @ViewById(R.id.frame_fragment_certificate)     FrameLayout frame_fragment_certificate;*//*    @ViewById(R.id.rl_cer)    RelativeLayout card_certificate;*/    @ViewById(R.id.rl_cer)    RelativeLayout rl_cer;    @ViewById(R.id.scroll_v)    ScrollView scroll_v;    @ViewById(R.id.tv_pdf)    SansTextView tv_pdf;    boolean pdfPressed = false;    BigScreenshot longScreenshot;    String certificatePDFPath = "";    /*    @ViewById(R.id.ll_qiestions)        LinearLayout ll_qiestions;*/    @Bean(CertificatePresenterImpl.class)    CertificateContract.CertificatePresenter presenter;    AssessmentPaperForPush assessmentPaperForPush;    @ViewById(R.id.rv_rating)    RecyclerView rv_rating;    public CertificateFragment() {    }    @AfterViews    public void init() {        if (getArguments() != null) {            Bundle bundle = getArguments();            assessmentPaperForPush = (AssessmentPaperForPush) bundle.getSerializable("assessmentPaperForPush");        }        scroll_v.setBackground(getResources().getDrawable(Assessment_Utility.getRandomCertificateBackground(getActivity())));        presenter.setView(this);//        presenter = new CertificatePresenterImpl(getActivity(), this);        generateCertificate();    }    /* @Override     public void onCreate(Bundle savedInstanceState) {         super.onCreate(savedInstanceState);         if (getArguments() != null) {             Bundle bundle = getArguments();             assessmentPaperForPush = (AssessmentPaperForPush) bundle.getSerializable("assessmentPaperForPush");         }     }     @Override     public View onCreateView(LayoutInflater inflater, ViewGroup container,                              Bundle savedInstanceState) {         // Inflate the layout for this fragment         return inflater.inflate(R.layout.fragment_certificate, container, false);     }     @Override     public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {         super.onViewCreated(view, savedInstanceState);         ButterKnife.bind(this, view);         frame_fragment_certificate.setBackground(getResources().getDrawable(Assessment_Utility.getRandomCertificateBackground(getActivity())));         presenter = new CertificatePresenterImpl(getActivity(), this);         generateCertificate(); //        presenter.getScoreData(assessmentPaperForPush.getPaperId());     } */    private void generateCertificate() {        presenter.getStudentName();        AssessmentPaperPattern assessmentPaperPattern = AppDatabase.getDatabaseInstance(getActivity())                .getAssessmentPaperPatternDao().getAllAssessmentPaperPatternsBySubIdAndExamId(assessmentPaperForPush.getSubjectId(), assessmentPaperForPush.getExamId());        if (assessmentPaperPattern != null) {            createQuestionList(assessmentPaperPattern);        } else {            if (AssessmentApplication.wiseF.isDeviceConnectedToMobileOrWifiNetwork())                downloadPaperPattern(assessmentPaperForPush.getExamId());            else {            }        }        tv_correct_cnt.setText("" + assessmentPaperForPush.getCorrectCnt());        int totalWrong = assessmentPaperForPush.getWrongCnt() + assessmentPaperForPush.getSkipCnt();        tv_wrong_cnt.setText("" + totalWrong);        tv_skip_cnt.setText("" + assessmentPaperForPush.getSkipCnt());        tv_total_time.setText(assessmentPaperForPush.getExamTime() + " mins.");        calculateTime(assessmentPaperForPush.getPaperStartTime(), assessmentPaperForPush.getPaperEndTime());        tv_student_marks.setText(assessmentPaperForPush.getTotalMarks());        tv_total_marks.setText(assessmentPaperForPush.getOutOfMarks());        int totalCnt = assessmentPaperForPush.getCorrectCnt() + assessmentPaperForPush.getWrongCnt() + assessmentPaperForPush.getSkipCnt();        tv_total_cnt.setText(totalCnt + "");//        presenter.getPaper(assessmentPaperForPush.getExamId(), assessmentPaperForPush.getSubjectId());    }    private void createQuestionList(AssessmentPaperPattern assessmentPaperPattern) {        String paperId = assessmentPaperForPush.getPaperId();        List<CertificateRatingModalClass> questionList = new ArrayList<>();        setValuesInList(questionList, assessmentPaperPattern.getCertificateQuestion1(), assessmentPaperForPush.getQuestion1Rating(), "1", paperId);        setValuesInList(questionList, assessmentPaperPattern.getCertificateQuestion2(), assessmentPaperForPush.getQuestion2Rating(), "2", paperId);        setValuesInList(questionList, assessmentPaperPattern.getCertificateQuestion3(), assessmentPaperForPush.getQuestion3Rating(), "3", paperId);        setValuesInList(questionList, assessmentPaperPattern.getCertificateQuestion4(), assessmentPaperForPush.getQuestion4Rating(), "4", paperId);        setValuesInList(questionList, assessmentPaperPattern.getCertificateQuestion5(), assessmentPaperForPush.getQuestion5Rating(), "5", paperId);        setValuesInList(questionList, assessmentPaperPattern.getCertificateQuestion6(), assessmentPaperForPush.getQuestion6Rating(), "6", paperId);        setValuesInList(questionList, assessmentPaperPattern.getCertificateQuestion7(), assessmentPaperForPush.getQuestion7Rating(), "7", paperId);        setValuesInList(questionList, assessmentPaperPattern.getCertificateQuestion8(), assessmentPaperForPush.getQuestion8Rating(), "8", paperId);        setValuesInList(questionList, assessmentPaperPattern.getCertificateQuestion9(), assessmentPaperForPush.getQuestion9Rating(), "9", paperId);        setValuesInList(questionList, assessmentPaperPattern.getCertificateQuestion10(), assessmentPaperForPush.getQuestion10Rating(), "10", paperId);        CertificateRatingAdapter adapter = new CertificateRatingAdapter(getActivity(), questionList);        RecyclerView.LayoutManager mLayoutManager = new LinearLayoutManager(getActivity(), LinearLayoutManager.VERTICAL, false);        rv_rating.setLayoutManager(mLayoutManager);        rv_rating.setAdapter(adapter);    }    private void setValuesInList(List<CertificateRatingModalClass> questionList, String question, String questionRating, String level, String paperId) {        float rating;        if (question != null) {            if (!question.equalsIgnoreCase("")) {                CertificateRatingModalClass ratingModalClass = new CertificateRatingModalClass();                ratingModalClass.setCertificateQuestion(question + "");                if (questionRating != null                        && !questionRating.trim().equalsIgnoreCase("") && !questionRating.trim().equalsIgnoreCase("null")) {                    rating = Float.parseFloat(questionRating);                } else {                    rating = presenter.getRating(level, paperId);                }                ratingModalClass.setRating(rating);                questionList.add(ratingModalClass);            }        }    }    private void downloadPaperPattern(String examId) {        final ProgressDialog progressDialog = new ProgressDialog(getActivity());        progressDialog.show();        progressDialog.setMessage(getString(R.string.downloading_paper_pattern));        progressDialog.setCancelable(false);        progressDialog.setCanceledOnTouchOutside(false);//        progressDialog.show();        AndroidNetworking.get(APIs.AssessmentPaperPatternAPI + examId)                .build()                .getAsString(new StringRequestListener() {                    @Override                    public void onResponse(String response) {                        Gson gson = new Gson();                        AssessmentPaperPattern assessmentPaperPattern = gson.fromJson(response, AssessmentPaperPattern.class);                        if (assessmentPaperPattern != null) {                            AppDatabase.getDatabaseInstance(getActivity()).getAssessmentPaperPatternDao().insertPaperPattern(assessmentPaperPattern);                            Log.d(";;;;", assessmentPaperPattern.getCertificateQuestion1() + "");                            createQuestionList(assessmentPaperPattern);                        }                        progressDialog.dismiss();                    }                    @Override                    public void onError(ANError anError) {                        progressDialog.dismiss();                        Toast.makeText(getActivity(), "Error downloading paper pattern..", Toast.LENGTH_SHORT).show();                    }                });    }    @Override    public void setStudentName(String name) {//        tv_studentName.setText(name);        String timeStamp = assessmentPaperForPush.getPaperEndTime();        String dateStamp = timeStamp.split(" ")[0];        tv_studentName.setText(Html.fromHtml("<b><i><font color=\"#07992F\">"                + name + "</font></i></b> has completed<br><i><b>" + assessmentPaperForPush.getExamName() + "</b></i> successfully"));        tv_name_details.setText(Html.fromHtml("on " + dateStamp + " using<br>'" + getResources().getString(R.string.app_name) + "' app<br>"                + "by <i>Pratham Education Foundation.</i>"));    }    private void calculateTime(String paperStartTime, String paperEndTime) {        try {            Date date1 = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss").parse(paperStartTime);            Date date2 = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss").parse(paperEndTime);            long diff = date2.getTime() - date1.getTime();            long diffSeconds = diff / 1000 % 60;            long diffMinutes = diff / (60 * 1000) % 60;            long diffHours = diff / (60 * 60 * 1000);            String unit = "min.";            String time = "";            if (diffHours == 0 && diffMinutes == 0 && diffSeconds != 0) {                unit = " secs.";                time = "00 : 00 : " + diffSeconds + "";            } else if (diffHours == 0 && diffMinutes != 0) {                unit = " mins.";                time = "00 : " + diffMinutes + " : " + diffSeconds;            } else if (diffHours != 0) {                unit = " hrs.";                time = diffHours + " : " + diffMinutes + "  : " + diffSeconds;            }            tv_time_taken.setText(time + unit);        } catch (Exception e) {            e.printStackTrace();        }    }    @Click(R.id.tv_pdf)    public void SharePDFClicked() {        if (!pdfPressed) {//        showLoader();            pdfPressed = true;            Log.d("SharePDF", "SharePDFClicked: AAAAAAAAAAAAAAAAAAAAAA");/*            certificatePDFPath = Environment.getExternalStorageDirectory().toString() + "/.FCAInternal/StudentPDFs/"                    + FastSave.getInstance().getString(CURRENT_STUDENT_ID, "") + "/";*/            certificatePDFPath = AssessmentApplication.assessPath + Assessment_Constants.STORE_STUDENT_PDF_PATH + "/";            if (!new File(certificatePDFPath).exists())                new File(certificatePDFPath).mkdir();            tv_pdf.setText("STOP");//        takeSS(recyclerView);            // Main container which screenshot is to be taken - main_certi_layout            // recyclerView for scrolling screenshot.            longScreenshot = new BigScreenshot(this, rv_rating, rl_cer);            longScreenshot.startScreenshot();            new Handler().postDelayed(() -> tv_pdf.performClick(), 45);        } else {            pdfPressed = false;            longScreenshot.stopScreenshot();            tv_pdf.setText("PDF");        }    }    @Override    public void getScreenshot(Bitmap bitmap) {        Log.d("SharePDF", "getScreenshot: BBBBBBBBBBBBBBBBBBBBBBBBB");        PdfDocument pdfDocument = new PdfDocument();        PdfDocument.PageInfo myPageInfo = new PdfDocument.PageInfo.Builder(bitmap.getWidth(), bitmap.getHeight(), 1).create();        PdfDocument.Page page = pdfDocument.startPage(myPageInfo);        page.getCanvas().drawBitmap(bitmap, 0, 0, null);        pdfDocument.finishPage(page);        String pdfName = FastSave.getInstance().getString("currentStudentID", "") + "_" + assessmentPaperForPush.getPaperId() + ".pdf";        certificatePDFPath = certificatePDFPath + "" + pdfName;        File myPDFFile = new File(certificatePDFPath);        try {            pdfDocument.writeTo(new FileOutputStream(myPDFFile));        } catch (IOException e) {            e.printStackTrace();        }        pdfDocument.close();        if (myPDFFile.exists()) {//            Uri uri = Uri.fromFile(myPDFFile);            Uri uri = FileProvider.getUriForFile(getActivity(),                    getActivity().getApplicationContext().getPackageName() + ".provider", myPDFFile);            Intent share = new Intent();            share.setAction(Intent.ACTION_SEND);            share.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);            share.setType("application/pdf");            share.putExtra(Intent.EXTRA_STREAM, uri);            startActivity(Intent.createChooser(share, "Share app via"));        }    }}